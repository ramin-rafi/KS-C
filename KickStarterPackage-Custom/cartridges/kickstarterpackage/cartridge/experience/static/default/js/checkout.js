/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout.js":
/*!*******************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/checkout.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar processInclude = __webpack_require__(/*! ./util */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/util.js\");\r\n\r\n$(document).ready(function () {\r\n    processInclude(__webpack_require__(/*! ./checkout/checkout */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/checkout.js\"));\r\n});\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/checkout.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/address.js":
/*!***************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/address.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * Populate the Billing Address Summary View\r\n * @param {string} parentSelector - the top level DOM selector for a unique address summary\r\n * @param {Object} address - the address data\r\n */\r\nfunction populateAddressSummary(parentSelector, address) {\r\n    $.each(address, function (attr) {\r\n        var val = address[attr];\r\n        $('.' + attr, parentSelector).text(val || '');\r\n    });\r\n}\r\n\r\n/**\r\n * returns a formed <option /> element\r\n * @param {Object} shipping - the shipping object (shipment model)\r\n * @param {boolean} selected - current shipping is selected (for PLI)\r\n * @param {order} order - the Order model\r\n * @param {Object} [options] - options\r\n * @returns {Object} - the jQuery / DOMElement\r\n */\r\nfunction optionValueForAddress(shipping, selected, order, options) {\r\n    var safeOptions = options || {};\r\n    var isBilling = safeOptions.type && safeOptions.type === 'billing';\r\n    var className = safeOptions.className || '';\r\n    var isSelected = selected;\r\n    var isNew = !shipping;\r\n    if (typeof shipping === 'string') {\r\n        return $('<option class=\"' + className + '\" disabled>' + shipping + '</option>');\r\n    }\r\n    var safeShipping = shipping || {};\r\n    var shippingAddress = safeShipping.shippingAddress || {};\r\n\r\n    if (isBilling && isNew && !order.billing.matchingAddressId) {\r\n        shippingAddress = order.billing.billingAddress.address || {};\r\n        isNew = false;\r\n        isSelected = true;\r\n        safeShipping.UUID = 'manual-entry';\r\n    }\r\n\r\n    var uuid = safeShipping.UUID ? safeShipping.UUID : 'new';\r\n    var optionEl = $('<option class=\"' + className + '\" />');\r\n    optionEl.val(uuid);\r\n\r\n    var title;\r\n\r\n    if (isNew) {\r\n        title = order.resources.addNewAddress;\r\n    } else {\r\n        title = [];\r\n        if (shippingAddress.firstName) {\r\n            title.push(shippingAddress.firstName);\r\n        }\r\n        if (shippingAddress.lastName) {\r\n            title.push(shippingAddress.lastName);\r\n        }\r\n        if (shippingAddress.address1) {\r\n            title.push(shippingAddress.address1);\r\n        }\r\n        if (shippingAddress.address2) {\r\n            title.push(shippingAddress.address2);\r\n        }\r\n        if (shippingAddress.city) {\r\n            if (shippingAddress.state) {\r\n                title.push(shippingAddress.city + ',');\r\n            } else {\r\n                title.push(shippingAddress.city);\r\n            }\r\n        }\r\n        if (shippingAddress.stateCode) {\r\n            title.push(shippingAddress.stateCode);\r\n        }\r\n        if (shippingAddress.postalCode) {\r\n            title.push(shippingAddress.postalCode);\r\n        }\r\n        if (!isBilling && safeShipping.selectedShippingMethod) {\r\n            title.push('-');\r\n            title.push(safeShipping.selectedShippingMethod.displayName);\r\n        }\r\n\r\n        if (title.length > 2) {\r\n            title = title.join(' ');\r\n        } else {\r\n            title = order.resources.newAddress;\r\n        }\r\n    }\r\n    optionEl.text(title);\r\n\r\n    var keyMap = {\r\n        'data-first-name': 'firstName',\r\n        'data-last-name': 'lastName',\r\n        'data-address1': 'address1',\r\n        'data-address2': 'address2',\r\n        'data-city': 'city',\r\n        'data-state-code': 'stateCode',\r\n        'data-postal-code': 'postalCode',\r\n        'data-country-code': 'countryCode',\r\n        'data-phone': 'phone'\r\n    };\r\n    $.each(keyMap, function (key) {\r\n        var mappedKey = keyMap[key];\r\n        var mappedValue = shippingAddress[mappedKey];\r\n        // In case of country code\r\n        if (mappedValue && typeof mappedValue === 'object') {\r\n            mappedValue = mappedValue.value;\r\n        }\r\n\r\n        optionEl.attr(key, mappedValue || '');\r\n    });\r\n\r\n    var giftObj = {\r\n        'data-is-gift': 'isGift',\r\n        'data-gift-message': 'giftMessage'\r\n    };\r\n\r\n    $.each(giftObj, function (key) {\r\n        var mappedKey = giftObj[key];\r\n        var mappedValue = safeShipping[mappedKey];\r\n        optionEl.attr(key, mappedValue || '');\r\n    });\r\n\r\n    if (isSelected) {\r\n        optionEl.attr('selected', true);\r\n    }\r\n\r\n    return optionEl;\r\n}\r\n\r\n/**\r\n * returns address properties from a UI form\r\n * @param {Form} form - the Form element\r\n * @returns {Object} - a JSON object with all values\r\n */\r\nfunction getAddressFieldsFromUI(form) {\r\n    var address = {\r\n        firstName: $('input[name$=_firstName]', form).val(),\r\n        lastName: $('input[name$=_lastName]', form).val(),\r\n        address1: $('input[name$=_address1]', form).val(),\r\n        address2: $('input[name$=_address2]', form).val(),\r\n        city: $('input[name$=_city]', form).val(),\r\n        postalCode: $('input[name$=_postalCode]', form).val(),\r\n        stateCode: $('select[name$=_stateCode],input[name$=_stateCode]', form).val(),\r\n        countryCode: $('select[name$=_country]', form).val(),\r\n        phone: $('input[name$=_phone]', form).val()\r\n    };\r\n    return address;\r\n}\r\n\r\nmodule.exports = {\r\n    methods: {\r\n        populateAddressSummary: populateAddressSummary,\r\n        optionValueForAddress: optionValueForAddress,\r\n        getAddressFieldsFromUI: getAddressFieldsFromUI\r\n    },\r\n\r\n    showDetails: function () {\r\n        $('.btn-show-details').on('click', function () {\r\n            var form = $(this).closest('form');\r\n\r\n            form.attr('data-address-mode', 'details');\r\n            form.find('.multi-ship-address-actions').removeClass('d-none');\r\n            form.find('.multi-ship-action-buttons .col-12.btn-save-multi-ship').addClass('d-none');\r\n        });\r\n    },\r\n\r\n    addNewAddress: function () {\r\n        $('.btn-add-new').on('click', function () {\r\n            var $el = $(this);\r\n            if ($el.parents('#dwfrm_billing').length > 0) {\r\n                // Handle billing address case\r\n                $('body').trigger('checkout:clearBillingForm');\r\n                var $option = $($el.parents('form').find('.addressSelector option')[0]);\r\n                $option.attr('value', 'new');\r\n                var $newTitle = $('#dwfrm_billing input[name=localizedNewAddressTitle]').val();\r\n                $option.text($newTitle);\r\n                $option.prop('selected', 'selected');\r\n                $el.parents('[data-address-mode]').attr('data-address-mode', 'new');\r\n            } else {\r\n                // Handle shipping address case\r\n                var $newEl = $el.parents('form').find('.addressSelector option[value=new]');\r\n                $newEl.prop('selected', 'selected');\r\n                $newEl.parent().trigger('change');\r\n            }\r\n        });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/address.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/billing.js":
/*!***************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/billing.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar addressHelpers = __webpack_require__(/*! ./address */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/address.js\");\r\nvar cleave = __webpack_require__(/*! ../components/cleave */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/components/cleave.js\");\r\n\r\n/**\r\n * updates the billing address selector within billing forms\r\n * @param {Object} order - the order model\r\n * @param {Object} customer - the customer model\r\n */\r\nfunction updateBillingAddressSelector(order, customer) {\r\n    var shippings = order.shipping;\r\n\r\n    var form = $('form[name$=billing]')[0];\r\n    var $billingAddressSelector = $('.addressSelector', form);\r\n    var hasSelectedAddress = false;\r\n\r\n    if ($billingAddressSelector && $billingAddressSelector.length === 1) {\r\n        $billingAddressSelector.empty();\r\n        // Add New Address option\r\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n            null,\r\n            false,\r\n            order,\r\n            { type: 'billing' }));\r\n\r\n        // Separator -\r\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n            order.resources.shippingAddresses, false, order, {\r\n                // className: 'multi-shipping',\r\n                type: 'billing'\r\n            }\r\n        ));\r\n\r\n        shippings.forEach(function (aShipping) {\r\n            var isSelected = order.billing.matchingAddressId === aShipping.UUID;\r\n            hasSelectedAddress = hasSelectedAddress || isSelected;\r\n            // Shipping Address option\r\n            $billingAddressSelector.append(\r\n                addressHelpers.methods.optionValueForAddress(aShipping, isSelected, order,\r\n                    {\r\n                        // className: 'multi-shipping',\r\n                        type: 'billing'\r\n                    }\r\n                )\r\n            );\r\n        });\r\n\r\n        if (customer.addresses && customer.addresses.length > 0) {\r\n            $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n                order.resources.accountAddresses, false, order));\r\n            customer.addresses.forEach(function (address) {\r\n                var isSelected = order.billing.matchingAddressId === address.ID;\r\n                hasSelectedAddress = hasSelectedAddress || isSelected;\r\n                // Customer Address option\r\n                $billingAddressSelector.append(\r\n                    addressHelpers.methods.optionValueForAddress({\r\n                        UUID: 'ab_' + address.ID,\r\n                        shippingAddress: address\r\n                    }, isSelected, order, { type: 'billing' })\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    if (hasSelectedAddress\r\n        || (!order.billing.matchingAddressId && order.billing.billingAddress.address)) {\r\n        // show\r\n        $(form).attr('data-address-mode', 'edit');\r\n    } else {\r\n        $(form).attr('data-address-mode', 'new');\r\n    }\r\n\r\n    $billingAddressSelector.show();\r\n}\r\n\r\n/**\r\n * Updates the billing address form values within payment forms without any payment instrument validation\r\n * @param {Object} order - the order model\r\n */\r\nfunction updateBillingAddress(order) {\r\n    var billing = order.billing;\r\n    if (!billing.billingAddress || !billing.billingAddress.address) return;\r\n\r\n    var form = $('form[name=dwfrm_billing]');\r\n    if (!form) return;\r\n\r\n    $('input[name$=_firstName]', form).val(billing.billingAddress.address.firstName);\r\n    $('input[name$=_lastName]', form).val(billing.billingAddress.address.lastName);\r\n    $('input[name$=_address1]', form).val(billing.billingAddress.address.address1);\r\n    $('input[name$=_address2]', form).val(billing.billingAddress.address.address2);\r\n    $('input[name$=_city]', form).val(billing.billingAddress.address.city);\r\n    $('input[name$=_postalCode]', form).val(billing.billingAddress.address.postalCode);\r\n    $('select[name$=_stateCode],input[name$=_stateCode]', form)\r\n        .val(billing.billingAddress.address.stateCode);\r\n    $('select[name$=_country]', form).val(billing.billingAddress.address.countryCode.value);\r\n    $('input[name$=_phone]', form).val(billing.billingAddress.address.phone);\r\n    $('input[name$=_email]', form).val(order.orderEmail);\r\n}\r\n\r\n/**\r\n * Validate and update payment instrument form fields\r\n * @param {Object} order - the order model\r\n */\r\nfunction validateAndUpdateBillingPaymentInstrument(order) {\r\n    var billing = order.billing;\r\n    if (!billing.payment || !billing.payment.selectedPaymentInstruments\r\n        || billing.payment.selectedPaymentInstruments.length <= 0) return;\r\n\r\n    var form = $('form[name=dwfrm_billing]');\r\n    if (!form) return;\r\n\r\n    var instrument = billing.payment.selectedPaymentInstruments[0];\r\n    $('select[name$=expirationMonth]', form).val(instrument.expirationMonth);\r\n    $('select[name$=expirationYear]', form).val(instrument.expirationYear);\r\n    // Force security code and card number clear\r\n    $('input[name$=securityCode]', form).val('');\r\n    $('input[name$=cardNumber]').data('cleave').setRawValue('');\r\n}\r\n\r\n/**\r\n * Updates the billing address form values within payment forms\r\n * @param {Object} order - the order model\r\n */\r\nfunction updateBillingAddressFormValues(order) {\r\n    module.exports.methods.updateBillingAddress(order);\r\n    module.exports.methods.validateAndUpdateBillingPaymentInstrument(order);\r\n}\r\n\r\n/**\r\n * clears the billing address form values\r\n */\r\nfunction clearBillingAddressFormValues() {\r\n    updateBillingAddressFormValues({\r\n        billing: {\r\n            billingAddress: {\r\n                address: {\r\n                    countryCode: {}\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * update billing address summary and contact information\r\n * @param {Object} order - checkout model to use as basis of new truth\r\n */\r\nfunction updateBillingAddressSummary(order) {\r\n    // update billing address summary\r\n    addressHelpers.methods.populateAddressSummary('.billing .address-summary',\r\n        order.billing.billingAddress.address);\r\n\r\n    // update billing parts of order summary\r\n    $('.order-summary-email').text(order.orderEmail);\r\n\r\n    if (order.billing.billingAddress.address) {\r\n        $('.order-summary-phone').text(order.billing.billingAddress.address.phone);\r\n    }\r\n}\r\n\r\n/**\r\n * Updates the billing information in checkout, based on the supplied order model\r\n * @param {Object} order - checkout model to use as basis of new truth\r\n * @param {Object} customer - customer model to use as basis of new truth\r\n * @param {Object} [options] - options\r\n */\r\nfunction updateBillingInformation(order, customer) {\r\n    updateBillingAddressSelector(order, customer);\r\n\r\n    // update billing address form\r\n    updateBillingAddressFormValues(order);\r\n\r\n    // update billing address summary and billing parts of order summary\r\n    updateBillingAddressSummary(order);\r\n}\r\n\r\n/**\r\n * Updates the payment information in checkout, based on the supplied order model\r\n * @param {Object} order - checkout model to use as basis of new truth\r\n */\r\nfunction updatePaymentInformation(order) {\r\n    // update payment details\r\n    var $paymentSummary = $('.payment-details');\r\n    var htmlToAppend = '';\r\n\r\n    if (order.billing.payment && order.billing.payment.selectedPaymentInstruments\r\n        && order.billing.payment.selectedPaymentInstruments.length > 0) {\r\n        htmlToAppend += '<span>' + order.resources.cardType + ' '\r\n            + order.billing.payment.selectedPaymentInstruments[0].type\r\n            + '</span><div>'\r\n            + order.billing.payment.selectedPaymentInstruments[0].maskedCreditCardNumber\r\n            + '</div><div><span>'\r\n            + order.resources.cardEnding + ' '\r\n            + order.billing.payment.selectedPaymentInstruments[0].expirationMonth\r\n            + '/' + order.billing.payment.selectedPaymentInstruments[0].expirationYear\r\n            + '</span></div>';\r\n    }\r\n\r\n    $paymentSummary.empty().append(htmlToAppend);\r\n}\r\n\r\n/**\r\n * clears the credit card form\r\n */\r\nfunction clearCreditCardForm() {\r\n    $('input[name$=\"_cardNumber\"]').data('cleave').setRawValue('');\r\n    $('select[name$=\"_expirationMonth\"]').val('');\r\n    $('select[name$=\"_expirationYear\"]').val('');\r\n    $('input[name$=\"_securityCode\"]').val('');\r\n}\r\n\r\nmodule.exports = {\r\n    methods: {\r\n        updateBillingAddressSelector: updateBillingAddressSelector,\r\n        updateBillingAddressFormValues: updateBillingAddressFormValues,\r\n        clearBillingAddressFormValues: clearBillingAddressFormValues,\r\n        updateBillingInformation: updateBillingInformation,\r\n        updatePaymentInformation: updatePaymentInformation,\r\n        clearCreditCardForm: clearCreditCardForm,\r\n        updateBillingAddress: updateBillingAddress,\r\n        validateAndUpdateBillingPaymentInstrument: validateAndUpdateBillingPaymentInstrument,\r\n        updateBillingAddressSummary: updateBillingAddressSummary\r\n    },\r\n\r\n    showBillingDetails: function () {\r\n        $('.btn-show-billing-details').on('click', function () {\r\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'new');\r\n        });\r\n    },\r\n\r\n    hideBillingDetails: function () {\r\n        $('.btn-hide-billing-details').on('click', function () {\r\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'shipment');\r\n        });\r\n    },\r\n\r\n    selectBillingAddress: function () {\r\n        $('.payment-form .addressSelector').on('change', function () {\r\n            var form = $(this).parents('form')[0];\r\n            var selectedOption = $('option:selected', this);\r\n            var optionID = selectedOption[0].value;\r\n\r\n            if (optionID === 'new') {\r\n                // Show Address\r\n                $(form).attr('data-address-mode', 'new');\r\n            } else {\r\n                // Hide Address\r\n                $(form).attr('data-address-mode', 'shipment');\r\n            }\r\n\r\n            // Copy fields\r\n            var attrs = selectedOption.data();\r\n            var element;\r\n\r\n            Object.keys(attrs).forEach(function (attr) {\r\n                element = attr === 'countryCode' ? 'country' : attr;\r\n                if (element === 'cardNumber') {\r\n                    $('.cardNumber').data('cleave').setRawValue(attrs[attr]);\r\n                } else {\r\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    handleCreditCardNumber: function () {\r\n        cleave.handleCreditCardNumber('.cardNumber', '#cardType');\r\n    },\r\n\r\n    santitizeForm: function () {\r\n        $('body').on('checkout:serializeBilling', function (e, data) {\r\n            var serializedForm = cleave.serializeData(data.form);\r\n\r\n            data.callback(serializedForm);\r\n        });\r\n    },\r\n\r\n    selectSavedPaymentInstrument: function () {\r\n        $(document).on('click', '.saved-payment-instrument', function (e) {\r\n            e.preventDefault();\r\n            $('.saved-payment-security-code').val('');\r\n            $('.saved-payment-instrument').removeClass('selected-payment');\r\n            $(this).addClass('selected-payment');\r\n            $('.saved-payment-instrument .card-image').removeClass('checkout-hidden');\r\n            $('.saved-payment-instrument .security-code-input').addClass('checkout-hidden');\r\n            $('.saved-payment-instrument.selected-payment' +\r\n                ' .card-image').addClass('checkout-hidden');\r\n            $('.saved-payment-instrument.selected-payment ' +\r\n                '.security-code-input').removeClass('checkout-hidden');\r\n        });\r\n    },\r\n\r\n    addNewPaymentInstrument: function () {\r\n        $('.btn.add-payment').on('click', function (e) {\r\n            e.preventDefault();\r\n            $('.payment-information').data('is-new-payment', true);\r\n            clearCreditCardForm();\r\n            $('.credit-card-form').removeClass('checkout-hidden');\r\n            $('.user-payment-instruments').addClass('checkout-hidden');\r\n        });\r\n    },\r\n\r\n    cancelNewPayment: function () {\r\n        $('.cancel-new-payment').on('click', function (e) {\r\n            e.preventDefault();\r\n            $('.payment-information').data('is-new-payment', false);\r\n            clearCreditCardForm();\r\n            $('.user-payment-instruments').removeClass('checkout-hidden');\r\n            $('.credit-card-form').addClass('checkout-hidden');\r\n        });\r\n    },\r\n\r\n    clearBillingForm: function () {\r\n        $('body').on('checkout:clearBillingForm', function () {\r\n            clearBillingAddressFormValues();\r\n        });\r\n    },\r\n\r\n    paymentTabs: function () {\r\n        $('.payment-options .nav-item').on('click', function (e) {\r\n            e.preventDefault();\r\n            var methodID = $(this).data('method-id');\r\n            $('.payment-information').data('payment-method-id', methodID);\r\n        });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/billing.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/checkout.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/checkout.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar customerHelpers = __webpack_require__(/*! ./customer */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/customer.js\");\r\nvar addressHelpers = __webpack_require__(/*! ./address */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/address.js\");\r\nvar shippingHelpers = __webpack_require__(/*! ./shipping */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/shipping.js\");\r\nvar billingHelpers = __webpack_require__(/*! ./billing */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/billing.js\");\r\nvar summaryHelpers = __webpack_require__(/*! ./summary */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/summary.js\");\r\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/formErrors.js\");\r\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/components/scrollAnimate.js\");\r\n\r\n\r\n/**\r\n * Create the jQuery Checkout Plugin.\r\n *\r\n * This jQuery plugin will be registered on the dom element in checkout.isml with the\r\n * id of \"checkout-main\".\r\n *\r\n * The checkout plugin will handle the different state the user interface is in as the user\r\n * progresses through the varying forms such as shipping and payment.\r\n *\r\n * Billing info and payment info are used a bit synonymously in this code.\r\n *\r\n */\r\n(function ($) {\r\n    $.fn.checkout = function () { // eslint-disable-line\r\n        var plugin = this;\r\n\r\n        //\r\n        // Collect form data from user input\r\n        //\r\n        var formData = {\r\n            // Customer Data\r\n            customer: {},\r\n\r\n            // Shipping Address\r\n            shipping: {},\r\n\r\n            // Billing Address\r\n            billing: {},\r\n\r\n            // Payment\r\n            payment: {},\r\n\r\n            // Gift Codes\r\n            giftCode: {}\r\n        };\r\n\r\n        //\r\n        // The different states/stages of checkout\r\n        //\r\n        var checkoutStages = [\r\n            'customer',\r\n            'shipping',\r\n            'payment',\r\n            'placeOrder',\r\n            'submitted'\r\n        ];\r\n\r\n        /**\r\n         * Updates the URL to determine stage\r\n         * @param {number} currentStage - The current stage the user is currently on in the checkout\r\n         */\r\n        function updateUrl(currentStage) {\r\n            history.pushState(\r\n                checkoutStages[currentStage],\r\n                document.title,\r\n                location.pathname\r\n                + '?stage='\r\n                + checkoutStages[currentStage]\r\n                + '#'\r\n                + checkoutStages[currentStage]\r\n            );\r\n        }\r\n\r\n        //\r\n        // Local member methods of the Checkout plugin\r\n        //\r\n        var members = {\r\n\r\n            // initialize the currentStage variable for the first time\r\n            currentStage: 0,\r\n\r\n            /**\r\n             * Set or update the checkout stage (AKA the shipping, billing, payment, etc... steps)\r\n             * @returns {Object} a promise\r\n             */\r\n            updateStage: function () {\r\n                var stage = checkoutStages[members.currentStage];\r\n                var defer = $.Deferred(); // eslint-disable-line\r\n\r\n                if (stage === 'customer') {\r\n                    //\r\n                    // Clear Previous Errors\r\n                    //\r\n                    customerHelpers.methods.clearErrors();\r\n                    //\r\n                    // Submit the Customer Form\r\n                    //\r\n                    var customerFormSelector = customerHelpers.methods.isGuestFormActive() ? customerHelpers.vars.GUEST_FORM : customerHelpers.vars.REGISTERED_FORM;\r\n                    var customerForm = $(customerFormSelector);\r\n                    $.ajax({\r\n                        url: customerForm.attr('action'),\r\n                        type: 'post',\r\n                        data: customerForm.serialize(),\r\n                        success: function (data) {\r\n                            if (data.redirectUrl) {\r\n                                window.location.href = data.redirectUrl;\r\n                            } else {\r\n                                customerHelpers.methods.customerFormResponse(defer, data);\r\n                            }\r\n                        },\r\n                        error: function (err) {\r\n                            if (err.responseJSON && err.responseJSON.redirectUrl) {\r\n                                window.location.href = err.responseJSON.redirectUrl;\r\n                            }\r\n                            // Server error submitting form\r\n                            defer.reject(err.responseJSON);\r\n                        }\r\n                    });\r\n                    return defer;\r\n                } else if (stage === 'shipping') {\r\n                    //\r\n                    // Clear Previous Errors\r\n                    //\r\n                    formHelpers.clearPreviousErrors('.shipping-form');\r\n\r\n                    //\r\n                    // Submit the Shipping Address Form\r\n                    //\r\n                    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\r\n                    var formSelector = isMultiShip ?\r\n                        '.multi-shipping .active form' : '.single-shipping .shipping-form';\r\n                    var form = $(formSelector);\r\n\r\n                    if (isMultiShip && form.length === 0) {\r\n                        // disable the next:Payment button here\r\n                        $('body').trigger('checkout:disableButton', '.next-step-button button');\r\n                        // in case the multi ship form is already submitted\r\n                        var url = $('#checkout-main').attr('data-checkout-get-url');\r\n                        $.ajax({\r\n                            url: url,\r\n                            method: 'GET',\r\n                            success: function (data) {\r\n                                // enable the next:Payment button here\r\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\r\n                                if (!data.error) {\r\n                                    $('body').trigger('checkout:updateCheckoutView',\r\n                                        { order: data.order, customer: data.customer });\r\n                                    defer.resolve();\r\n                                } else if (data.message && $('.shipping-error .alert-danger').length < 1) {\r\n                                    var errorMsg = data.message;\r\n                                    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\r\n                                        'fade show\" role=\"alert\">' +\r\n                                        '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\r\n                                        '<span aria-hidden=\"true\">&times;</span>' +\r\n                                        '</button>' + errorMsg + '</div>';\r\n                                    $('.shipping-error').append(errorHtml);\r\n                                    scrollAnimate($('.shipping-error'));\r\n                                    defer.reject();\r\n                                } else if (data.redirectUrl) {\r\n                                    window.location.href = data.redirectUrl;\r\n                                }\r\n                            },\r\n                            error: function () {\r\n                                // enable the next:Payment button here\r\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\r\n                                // Server error submitting form\r\n                                defer.reject();\r\n                            }\r\n                        });\r\n                    } else {\r\n                        var shippingFormData = form.serialize();\r\n\r\n                        $('body').trigger('checkout:serializeShipping', {\r\n                            form: form,\r\n                            data: shippingFormData,\r\n                            callback: function (data) {\r\n                                shippingFormData = data;\r\n                            }\r\n                        });\r\n                        // disable the next:Payment button here\r\n                        $('body').trigger('checkout:disableButton', '.next-step-button button');\r\n                        $.ajax({\r\n                            url: form.attr('action'),\r\n                            type: 'post',\r\n                            data: shippingFormData,\r\n                            success: function (data) {\r\n                                 // enable the next:Payment button here\r\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\r\n                                shippingHelpers.methods.shippingFormResponse(defer, data);\r\n                            },\r\n                            error: function (err) {\r\n                                // enable the next:Payment button here\r\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\r\n                                if (err.responseJSON && err.responseJSON.redirectUrl) {\r\n                                    window.location.href = err.responseJSON.redirectUrl;\r\n                                }\r\n                                // Server error submitting form\r\n                                defer.reject(err.responseJSON);\r\n                            }\r\n                        });\r\n                    }\r\n                    return defer;\r\n                } else if (stage === 'payment') {\r\n                    //\r\n                    // Submit the Billing Address Form\r\n                    //\r\n\r\n                    formHelpers.clearPreviousErrors('.payment-form');\r\n\r\n                    var billingAddressForm = $('#dwfrm_billing .billing-address-block :input').serialize();\r\n\r\n                    $('body').trigger('checkout:serializeBilling', {\r\n                        form: $('#dwfrm_billing .billing-address-block'),\r\n                        data: billingAddressForm,\r\n                        callback: function (data) {\r\n                            if (data) {\r\n                                billingAddressForm = data;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    var contactInfoForm = $('#dwfrm_billing .contact-info-block :input').serialize();\r\n\r\n                    $('body').trigger('checkout:serializeBilling', {\r\n                        form: $('#dwfrm_billing .contact-info-block'),\r\n                        data: contactInfoForm,\r\n                        callback: function (data) {\r\n                            if (data) {\r\n                                contactInfoForm = data;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    var activeTabId = $('.tab-pane.active').attr('id');\r\n                    var paymentInfoSelector = '#dwfrm_billing .' + activeTabId + ' .payment-form-fields :input';\r\n                    var paymentInfoForm = $(paymentInfoSelector).serialize();\r\n\r\n                    $('body').trigger('checkout:serializeBilling', {\r\n                        form: $(paymentInfoSelector),\r\n                        data: paymentInfoForm,\r\n                        callback: function (data) {\r\n                            if (data) {\r\n                                paymentInfoForm = data;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    var paymentForm = billingAddressForm + '&' + contactInfoForm + '&' + paymentInfoForm;\r\n\r\n                    if ($('.data-checkout-stage').data('customer-type') === 'registered') {\r\n                        // if payment method is credit card\r\n                        if ($('.payment-information').data('payment-method-id') === 'CREDIT_CARD') {\r\n                            if (!($('.payment-information').data('is-new-payment'))) {\r\n                                var cvvCode = $('.saved-payment-instrument.' +\r\n                                    'selected-payment .saved-payment-security-code').val();\r\n\r\n                                if (cvvCode === '') {\r\n                                    var cvvElement = $('.saved-payment-instrument.' +\r\n                                        'selected-payment ' +\r\n                                        '.form-control');\r\n                                    cvvElement.addClass('is-invalid');\r\n                                    scrollAnimate(cvvElement);\r\n                                    defer.reject();\r\n                                    return defer;\r\n                                }\r\n\r\n                                var $savedPaymentInstrument = $('.saved-payment-instrument' +\r\n                                    '.selected-payment'\r\n                                );\r\n\r\n                                paymentForm += '&storedPaymentUUID=' +\r\n                                    $savedPaymentInstrument.data('uuid');\r\n\r\n                                paymentForm += '&securityCode=' + cvvCode;\r\n                            }\r\n                        }\r\n                    }\r\n                     // disable the next:Place Order button here\r\n                    $('body').trigger('checkout:disableButton', '.next-step-button button');\r\n\r\n                    $.ajax({\r\n                        url: $('#dwfrm_billing').attr('action'),\r\n                        method: 'POST',\r\n                        data: paymentForm,\r\n                        success: function (data) {\r\n                             // enable the next:Place Order button here\r\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\r\n                            // look for field validation errors\r\n                            if (data.error) {\r\n                                if (data.fieldErrors.length) {\r\n                                    data.fieldErrors.forEach(function (error) {\r\n                                        if (Object.keys(error).length) {\r\n                                            formHelpers.loadFormErrors('.payment-form', error);\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                if (data.serverErrors.length) {\r\n                                    data.serverErrors.forEach(function (error) {\r\n                                        $('.error-message').show();\r\n                                        $('.error-message-text').text(error);\r\n                                        scrollAnimate($('.error-message'));\r\n                                    });\r\n                                }\r\n\r\n                                if (data.cartError) {\r\n                                    window.location.href = data.redirectUrl;\r\n                                }\r\n\r\n                                defer.reject();\r\n                            } else {\r\n                                //\r\n                                // Populate the Address Summary\r\n                                //\r\n                                $('body').trigger('checkout:updateCheckoutView',\r\n                                    { order: data.order, customer: data.customer });\r\n\r\n                                if (data.renderedPaymentInstruments) {\r\n                                    $('.stored-payments').empty().html(\r\n                                        data.renderedPaymentInstruments\r\n                                    );\r\n                                }\r\n\r\n                                if (data.customer.registeredUser\r\n                                    && data.customer.customerPaymentInstruments.length\r\n                                ) {\r\n                                    $('.cancel-new-payment').removeClass('checkout-hidden');\r\n                                }\r\n\r\n                                scrollAnimate();\r\n                                defer.resolve(data);\r\n                            }\r\n                        },\r\n                        error: function (err) {\r\n                            // enable the next:Place Order button here\r\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\r\n                            if (err.responseJSON && err.responseJSON.redirectUrl) {\r\n                                window.location.href = err.responseJSON.redirectUrl;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    return defer;\r\n                } else if (stage === 'placeOrder') {\r\n                    // disable the placeOrder button here\r\n                    $('body').trigger('checkout:disableButton', '.next-step-button button');\r\n                    $.ajax({\r\n                        url: $('.place-order').data('action'),\r\n                        method: 'POST',\r\n                        success: function (data) {\r\n                            // enable the placeOrder button here\r\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\r\n                            if (data.error) {\r\n                                if (data.cartError) {\r\n                                    window.location.href = data.redirectUrl;\r\n                                    defer.reject();\r\n                                } else {\r\n                                    // go to appropriate stage and display error message\r\n                                    defer.reject(data);\r\n                                }\r\n                            } else {\r\n                                var redirect = $('<form>')\r\n                                    .appendTo(document.body)\r\n                                    .attr({\r\n                                        method: 'POST',\r\n                                        action: data.continueUrl\r\n                                    });\r\n\r\n                                $('<input>')\r\n                                    .appendTo(redirect)\r\n                                    .attr({\r\n                                        name: 'orderID',\r\n                                        value: data.orderID\r\n                                    });\r\n\r\n                                $('<input>')\r\n                                    .appendTo(redirect)\r\n                                    .attr({\r\n                                        name: 'orderToken',\r\n                                        value: data.orderToken\r\n                                    });\r\n\r\n                                redirect.submit();\r\n                                defer.resolve(data);\r\n                            }\r\n                        },\r\n                        error: function () {\r\n                            // enable the placeOrder button here\r\n                            $('body').trigger('checkout:enableButton', $('.next-step-button button'));\r\n                        }\r\n                    });\r\n\r\n                    return defer;\r\n                }\r\n                var p = $('<div>').promise(); // eslint-disable-line\r\n                setTimeout(function () {\r\n                    p.done(); // eslint-disable-line\r\n                }, 500);\r\n                return p; // eslint-disable-line\r\n            },\r\n\r\n            /**\r\n             * Initialize the checkout stage.\r\n             *\r\n             * TODO: update this to allow stage to be set from server?\r\n             */\r\n            initialize: function () {\r\n                // set the initial state of checkout\r\n                members.currentStage = checkoutStages\r\n                    .indexOf($('.data-checkout-stage').data('checkout-stage'));\r\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\r\n\r\n                $('body').on('click', '.submit-customer-login', function (e) {\r\n                    e.preventDefault();\r\n                    members.nextStage();\r\n                });\r\n\r\n                $('body').on('click', '.submit-customer', function (e) {\r\n                    e.preventDefault();\r\n                    members.nextStage();\r\n                });\r\n\r\n                //\r\n                // Handle Payment option selection\r\n                //\r\n                $('input[name$=\"paymentMethod\"]', plugin).on('change', function () {\r\n                    $('.credit-card-form').toggle($(this).val() === 'CREDIT_CARD');\r\n                });\r\n\r\n                //\r\n                // Handle Next State button click\r\n                //\r\n                $(plugin).on('click', '.next-step-button button', function () {\r\n                    members.nextStage();\r\n                });\r\n\r\n                //\r\n                // Handle Edit buttons on shipping and payment summary cards\r\n                //\r\n                $('.customer-summary .edit-button', plugin).on('click', function () {\r\n                    members.gotoStage('customer');\r\n                });\r\n\r\n                $('.shipping-summary .edit-button', plugin).on('click', function () {\r\n                    if (!$('#checkout-main').hasClass('multi-ship')) {\r\n                        $('body').trigger('shipping:selectSingleShipping');\r\n                    }\r\n\r\n                    members.gotoStage('shipping');\r\n                });\r\n\r\n                $('.payment-summary .edit-button', plugin).on('click', function () {\r\n                    members.gotoStage('payment');\r\n                });\r\n\r\n                //\r\n                // remember stage (e.g. shipping)\r\n                //\r\n                updateUrl(members.currentStage);\r\n\r\n                //\r\n                // Listen for foward/back button press and move to correct checkout-stage\r\n                //\r\n                $(window).on('popstate', function (e) {\r\n                    //\r\n                    // Back button when event state less than current state in ordered\r\n                    // checkoutStages array.\r\n                    //\r\n                    if (e.state === null ||\r\n                        checkoutStages.indexOf(e.state) < members.currentStage) {\r\n                        members.handlePrevStage(false);\r\n                    } else if (checkoutStages.indexOf(e.state) > members.currentStage) {\r\n                        // Forward button  pressed\r\n                        members.handleNextStage(false);\r\n                    }\r\n                });\r\n\r\n                //\r\n                // Set the form data\r\n                //\r\n                plugin.data('formData', formData);\r\n            },\r\n\r\n            /**\r\n             * The next checkout state step updates the css for showing correct buttons etc...\r\n             */\r\n            nextStage: function () {\r\n                var promise = members.updateStage();\r\n\r\n                promise.done(function () {\r\n                    // Update UI with new stage\r\n                    $('.error-message').hide();\r\n                    members.handleNextStage(true);\r\n                });\r\n\r\n                promise.fail(function (data) {\r\n                    // show errors\r\n                    if (data) {\r\n                        if (data.errorStage) {\r\n                            members.gotoStage(data.errorStage.stage);\r\n\r\n                            if (data.errorStage.step === 'billingAddress') {\r\n                                var $billingAddressSameAsShipping = $(\r\n                                    'input[name$=\"_shippingAddressUseAsBillingAddress\"]'\r\n                                );\r\n                                if ($billingAddressSameAsShipping.is(':checked')) {\r\n                                    $billingAddressSameAsShipping.prop('checked', false);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (data.errorMessage) {\r\n                            $('.error-message').show();\r\n                            $('.error-message-text').text(data.errorMessage);\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n\r\n            /**\r\n             * The next checkout state step updates the css for showing correct buttons etc...\r\n             *\r\n             * @param {boolean} bPushState - boolean when true pushes state using the history api.\r\n             */\r\n            handleNextStage: function (bPushState) {\r\n                if (members.currentStage < checkoutStages.length - 1) {\r\n                    // move stage forward\r\n                    members.currentStage++;\r\n\r\n                    //\r\n                    // show new stage in url (e.g.payment)\r\n                    //\r\n                    if (bPushState) {\r\n                        updateUrl(members.currentStage);\r\n                    }\r\n                }\r\n\r\n                // Set the next stage on the DOM\r\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\r\n            },\r\n\r\n            /**\r\n             * Previous State\r\n             */\r\n            handlePrevStage: function () {\r\n                if (members.currentStage > 0) {\r\n                    // move state back\r\n                    members.currentStage--;\r\n                    updateUrl(members.currentStage);\r\n                }\r\n\r\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\r\n            },\r\n\r\n            /**\r\n             * Use window history to go to a checkout stage\r\n             * @param {string} stageName - the checkout state to goto\r\n             */\r\n            gotoStage: function (stageName) {\r\n                members.currentStage = checkoutStages.indexOf(stageName);\r\n                updateUrl(members.currentStage);\r\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\r\n            }\r\n        };\r\n\r\n        //\r\n        // Initialize the checkout\r\n        //\r\n        members.initialize();\r\n\r\n        return this;\r\n    };\r\n}(jQuery));\r\n\r\n\r\nvar exports = {\r\n    initialize: function () {\r\n        $('#checkout-main').checkout();\r\n    },\r\n\r\n    updateCheckoutView: function () {\r\n        $('body').on('checkout:updateCheckoutView', function (e, data) {\r\n            if (data.csrfToken) {\r\n                $(\"input[name*='csrf_token']\").val(data.csrfToken);\r\n            }\r\n            customerHelpers.methods.updateCustomerInformation(data.customer, data.order);\r\n            shippingHelpers.methods.updateMultiShipInformation(data.order);\r\n            summaryHelpers.updateTotals(data.order.totals);\r\n            data.order.shipping.forEach(function (shipping) {\r\n                shippingHelpers.methods.updateShippingInformation(\r\n                    shipping,\r\n                    data.order,\r\n                    data.customer,\r\n                    data.options\r\n                );\r\n            });\r\n            billingHelpers.methods.updateBillingInformation(\r\n                data.order,\r\n                data.customer,\r\n                data.options\r\n            );\r\n            billingHelpers.methods.updatePaymentInformation(data.order, data.options);\r\n            summaryHelpers.updateOrderProductSummaryInformation(data.order, data.options);\r\n        });\r\n    },\r\n\r\n    disableButton: function () {\r\n        $('body').on('checkout:disableButton', function (e, button) {\r\n            $(button).prop('disabled', true);\r\n        });\r\n    },\r\n\r\n    enableButton: function () {\r\n        $('body').on('checkout:enableButton', function (e, button) {\r\n            $(button).prop('disabled', false);\r\n        });\r\n    }\r\n\r\n\r\n};\r\n\r\n[customerHelpers, billingHelpers, shippingHelpers, addressHelpers].forEach(function (library) {\r\n    Object.keys(library).forEach(function (item) {\r\n        if (typeof library[item] === 'object') {\r\n            exports[item] = $.extend({}, exports[item], library[item]);\r\n        } else {\r\n            exports[item] = library[item];\r\n        }\r\n    });\r\n});\r\n\r\nmodule.exports = exports;\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/checkout.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/customer.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/customer.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/formErrors.js\");\r\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/components/scrollAnimate.js\");\r\nvar createErrorNotification = __webpack_require__(/*! ../components/errorNotification */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/components/errorNotification.js\");\r\nvar GUEST_FORM = '#guest-customer';\r\nvar REGISTERED_FORM = '#registered-customer';\r\nvar ERROR_SECTION = '.customer-error';\r\n\r\n/**\r\n * @returns {boolean} If guest is active, registered is not visible\r\n */\r\nfunction isGuestFormActive() {\r\n    return $(REGISTERED_FORM).hasClass('d-none');\r\n}\r\n\r\n/**\r\n * Clear any previous errors in the customer form.\r\n */\r\nfunction clearErrors() {\r\n    $(ERROR_SECTION).children().remove();\r\n    formHelpers.clearPreviousErrors('.customer-information-block');\r\n}\r\n\r\n/**\r\n * @param {Object} customerData - data includes checkout related customer information\r\n * @param {Object} orderData - data includes checkout related order information\r\n */\r\nfunction updateCustomerInformation(customerData, orderData) {\r\n    var $container = $('.customer-summary');\r\n    var $summaryDetails = $container.find('.summary-details');\r\n    var email = customerData.profile && customerData.profile.email ? customerData.profile.email : orderData.orderEmail;\r\n    $summaryDetails.find('.customer-summary-email').text(email);\r\n    if (customerData.registeredUser) {\r\n        $container.find('.edit-button').hide();\r\n    } else {\r\n        $container.find('.edit-button').show();\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Handle response from the server for valid or invalid form fields.\r\n * @param {Object} defer - the deferred object which will resolve on success or reject.\r\n * @param {Object} data - the response data with the invalid form fields or\r\n *  valid model data.\r\n */\r\nfunction customerFormResponse(defer, data) {\r\n    var parentForm = isGuestFormActive() ? GUEST_FORM : REGISTERED_FORM;\r\n    var formSelector = '.customer-section ' + parentForm;\r\n\r\n    // highlight fields with errors\r\n    if (data.error) {\r\n        if (data.fieldErrors.length) {\r\n            data.fieldErrors.forEach(function (error) {\r\n                if (Object.keys(error).length) {\r\n                    formHelpers.loadFormErrors(formSelector, error);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (data.customerErrorMessage) {\r\n            createErrorNotification(ERROR_SECTION, data.customerErrorMessage);\r\n        }\r\n\r\n        if (data.fieldErrors.length || data.customerErrorMessage || (data.serverErrors && data.serverErrors.length)) {\r\n            defer.reject(data);\r\n        }\r\n\r\n        if (data.cartError) {\r\n            window.location.href = data.redirectUrl;\r\n            defer.reject();\r\n        }\r\n    } else {\r\n        // Populate the Address Summary\r\n\r\n        $('body').trigger('checkout:updateCheckoutView', {\r\n            order: data.order,\r\n            customer: data.customer,\r\n            csrfToken: data.csrfToken\r\n        });\r\n        scrollAnimate($('.shipping-form'));\r\n        defer.resolve(data);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param {boolean} registered - wether a registered login block will be used\r\n */\r\nfunction chooseLoginBlock(registered) {\r\n    $(ERROR_SECTION).find('.alert').remove();\r\n    $('#password').val('');\r\n    if (registered) {\r\n        $(REGISTERED_FORM).removeClass('d-none');\r\n        $(GUEST_FORM).addClass('d-none');\r\n        $('#email').val($('#email-guest').val());\r\n    } else {\r\n        $(REGISTERED_FORM).addClass('d-none');\r\n        $(GUEST_FORM).removeClass('d-none');\r\n        $('#email').val('');\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Listeners for customer form\r\n     */\r\n    initListeners: function () {\r\n        // 1. password\r\n        var customerLogin = '.js-login-customer';\r\n        var cancelLogin = '.js-cancel-login';\r\n        var registered;\r\n        if (customerLogin.length !== 0) {\r\n            $('body').on('click', customerLogin, function (e) {\r\n                registered = true;\r\n                e.preventDefault();\r\n                chooseLoginBlock(registered);\r\n            });\r\n        }\r\n        if (cancelLogin.length !== 0) {\r\n            $('body').on('click', cancelLogin, function (e) {\r\n                registered = false;\r\n                e.preventDefault();\r\n                chooseLoginBlock(registered);\r\n            });\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        clearErrors: clearErrors,\r\n        updateCustomerInformation: updateCustomerInformation,\r\n        customerFormResponse: customerFormResponse,\r\n        isGuestFormActive: isGuestFormActive\r\n    },\r\n\r\n    vars: {\r\n        GUEST_FORM: GUEST_FORM,\r\n        REGISTERED_FORM: REGISTERED_FORM\r\n    }\r\n\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/customer.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/formErrors.js":
/*!******************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/formErrors.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/components/scrollAnimate.js\");\r\n\r\n/**\r\n * Display error messages and highlight form fields with errors.\r\n * @param {string} parentSelector - the form which contains the fields\r\n * @param {Object} fieldErrors - the fields with errors\r\n */\r\nfunction loadFormErrors(parentSelector, fieldErrors) { // eslint-disable-line\r\n    // Display error messages and highlight form fields with errors.\r\n    $.each(fieldErrors, function (attr) {\r\n        $('*[name=' + attr + ']', parentSelector)\r\n            .addClass('is-invalid')\r\n            .siblings('.invalid-feedback')\r\n            .html(fieldErrors[attr]);\r\n    });\r\n    // Animate to top of form that has errors\r\n    scrollAnimate($(parentSelector));\r\n}\r\n\r\n/**\r\n * Clear the form errors.\r\n * @param {string} parentSelector - the parent form selector.\r\n */\r\nfunction clearPreviousErrors(parentSelector) {\r\n    $(parentSelector).find('.form-control.is-invalid').removeClass('is-invalid');\r\n    $('.error-message').hide();\r\n}\r\n\r\nmodule.exports = {\r\n    loadFormErrors: loadFormErrors,\r\n    clearPreviousErrors: clearPreviousErrors\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/formErrors.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/shipping.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/shipping.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar addressHelpers = __webpack_require__(/*! ./address */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/address.js\");\r\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/formErrors.js\");\r\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"./cartridges/kickstarterpackage/cartridge/client/default/js/components/scrollAnimate.js\");\r\n\r\n/**\r\n * updates the shipping address selector within shipping forms\r\n * @param {Object} productLineItem - the productLineItem model\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n * @param {Object} order - the order model\r\n * @param {Object} customer - the customer model\r\n */\r\nfunction updateShippingAddressSelector(productLineItem, shipping, order, customer) {\r\n    var uuidEl = $('input[value=' + productLineItem.UUID + ']');\r\n    var shippings = order.shipping;\r\n\r\n    var form;\r\n    var $shippingAddressSelector;\r\n    var hasSelectedAddress = false;\r\n\r\n    if (uuidEl && uuidEl.length > 0) {\r\n        form = uuidEl[0].form;\r\n        $shippingAddressSelector = $('.addressSelector', form);\r\n    }\r\n\r\n    if ($shippingAddressSelector && $shippingAddressSelector.length === 1) {\r\n        $shippingAddressSelector.empty();\r\n        // Add New Address option\r\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n            null,\r\n            false,\r\n            order\r\n        ));\r\n\r\n        if (customer.addresses && customer.addresses.length > 0) {\r\n            $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n                order.resources.accountAddresses,\r\n                false,\r\n                order\r\n            ));\r\n\r\n            customer.addresses.forEach(function (address) {\r\n                var isSelected = shipping.matchingAddressId === address.ID;\r\n                $shippingAddressSelector.append(\r\n                    addressHelpers.methods.optionValueForAddress(\r\n                        { UUID: 'ab_' + address.ID, shippingAddress: address },\r\n                        isSelected,\r\n                        order\r\n                    )\r\n                );\r\n            });\r\n        }\r\n        // Separator -\r\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\r\n            order.resources.shippingAddresses, false, order, { className: 'multi-shipping' }\r\n        ));\r\n        shippings.forEach(function (aShipping) {\r\n            var isSelected = shipping.UUID === aShipping.UUID;\r\n            hasSelectedAddress = hasSelectedAddress || isSelected;\r\n            var addressOption = addressHelpers.methods.optionValueForAddress(\r\n                aShipping,\r\n                isSelected,\r\n                order,\r\n                { className: 'multi-shipping' }\r\n            );\r\n\r\n            var newAddress = addressOption.html() === order.resources.addNewAddress;\r\n            var matchingUUID = aShipping.UUID === shipping.UUID;\r\n            if ((newAddress && matchingUUID) || (!newAddress && matchingUUID) || (!newAddress && !matchingUUID)) {\r\n                $shippingAddressSelector.append(addressOption);\r\n            }\r\n            if (newAddress && !matchingUUID) {\r\n                $(addressOption[0]).remove();\r\n            }\r\n        });\r\n    }\r\n\r\n    if (!hasSelectedAddress) {\r\n        // show\r\n        $(form).addClass('hide-details');\r\n    } else {\r\n        $(form).removeClass('hide-details');\r\n    }\r\n\r\n    $('body').trigger('shipping:updateShippingAddressSelector', {\r\n        productLineItem: productLineItem,\r\n        shipping: shipping,\r\n        order: order,\r\n        customer: customer\r\n    });\r\n}\r\n\r\n/**\r\n * updates the shipping address form values within shipping forms\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n */\r\nfunction updateShippingAddressFormValues(shipping) {\r\n    var addressObject = $.extend({}, shipping.shippingAddress);\r\n\r\n    if (!addressObject) {\r\n        addressObject = {\r\n            firstName: null,\r\n            lastName: null,\r\n            address1: null,\r\n            address2: null,\r\n            city: null,\r\n            postalCode: null,\r\n            stateCode: null,\r\n            countryCode: null,\r\n            phone: null\r\n        };\r\n    }\r\n\r\n    addressObject.isGift = shipping.isGift;\r\n    addressObject.giftMessage = shipping.giftMessage;\r\n\r\n    $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\r\n        var form = el.form;\r\n        if (!form) return;\r\n        var countryCode = addressObject.countryCode;\r\n\r\n        $('input[name$=_firstName]', form).val(addressObject.firstName);\r\n        $('input[name$=_lastName]', form).val(addressObject.lastName);\r\n        $('input[name$=_address1]', form).val(addressObject.address1);\r\n        $('input[name$=_address2]', form).val(addressObject.address2);\r\n        $('input[name$=_city]', form).val(addressObject.city);\r\n        $('input[name$=_postalCode]', form).val(addressObject.postalCode);\r\n        $('select[name$=_stateCode],input[name$=_stateCode]', form)\r\n            .val(addressObject.stateCode);\r\n\r\n        if (countryCode && typeof countryCode === 'object') {\r\n            $('select[name$=_country]', form).val(addressObject.countryCode.value);\r\n        } else {\r\n            $('select[name$=_country]', form).val(addressObject.countryCode);\r\n        }\r\n\r\n        $('input[name$=_phone]', form).val(addressObject.phone);\r\n\r\n        $('input[name$=_isGift]', form).prop('checked', addressObject.isGift);\r\n        $('textarea[name$=_giftMessage]', form).val(addressObject.isGift && addressObject.giftMessage ? addressObject.giftMessage : '');\r\n    });\r\n\r\n    $('body').trigger('shipping:updateShippingAddressFormValues', { shipping: shipping });\r\n}\r\n\r\n/**\r\n * updates the shipping method radio buttons within shipping forms\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n */\r\nfunction updateShippingMethods(shipping) {\r\n    var uuidEl = $('input[value=' + shipping.UUID + ']');\r\n    if (uuidEl && uuidEl.length > 0) {\r\n        $.each(uuidEl, function (shipmentIndex, el) {\r\n            var form = el.form;\r\n            if (!form) return;\r\n\r\n            var $shippingMethodList = $('.shipping-method-list', form);\r\n\r\n            if ($shippingMethodList && $shippingMethodList.length > 0) {\r\n                $shippingMethodList.empty();\r\n                var shippingMethods = shipping.applicableShippingMethods;\r\n                var selected = shipping.selectedShippingMethod || {};\r\n                var shippingMethodFormID = form.name + '_shippingAddress_shippingMethodID';\r\n                //\r\n                // Create the new rows for each shipping method\r\n                //\r\n                $.each(shippingMethods, function (methodIndex, shippingMethod) {\r\n                    var tmpl = $('#shipping-method-template').clone();\r\n                    // set input\r\n                    $('input', tmpl)\r\n                        .prop('id', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID)\r\n                        .prop('name', shippingMethodFormID)\r\n                        .prop('value', shippingMethod.ID)\r\n                        .attr('checked', shippingMethod.ID === selected.ID);\r\n\r\n                    $('label', tmpl)\r\n                        .prop('for', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID);\r\n                    // set shipping method name\r\n                    $('.display-name', tmpl).text(shippingMethod.displayName);\r\n                    // set or hide arrival time\r\n                    if (shippingMethod.estimatedArrivalTime) {\r\n                        $('.arrival-time', tmpl)\r\n                            .text('(' + shippingMethod.estimatedArrivalTime + ')')\r\n                            .show();\r\n                    }\r\n                    // set shipping cost\r\n                    $('.shipping-cost', tmpl).text(shippingMethod.shippingCost);\r\n                    $shippingMethodList.append(tmpl.html());\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    $('body').trigger('shipping:updateShippingMethods', { shipping: shipping });\r\n}\r\n\r\n/**\r\n * Update list of available shipping methods whenever user modifies shipping address details.\r\n * @param {jQuery} $shippingForm - current shipping form\r\n */\r\nfunction updateShippingMethodList($shippingForm) {\r\n    // delay for autocomplete!\r\n    setTimeout(function () {\r\n        var $shippingMethodList = $shippingForm.find('.shipping-method-list');\r\n        var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\r\n        var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\r\n        var url = $shippingMethodList.data('actionUrl');\r\n        urlParams.shipmentUUID = shipmentUUID;\r\n\r\n        $shippingMethodList.spinner().start();\r\n        $.ajax({\r\n            url: url,\r\n            type: 'post',\r\n            dataType: 'json',\r\n            data: urlParams,\r\n            success: function (data) {\r\n                if (data.error) {\r\n                    window.location.href = data.redirectUrl;\r\n                } else {\r\n                    $('body').trigger('checkout:updateCheckoutView',\r\n                        {\r\n                            order: data.order,\r\n                            customer: data.customer,\r\n                            options: { keepOpen: true }\r\n                        });\r\n\r\n                    $shippingMethodList.spinner().stop();\r\n                }\r\n            }\r\n        });\r\n    }, 300);\r\n}\r\n\r\n/**\r\n * updates the order shipping summary for an order shipment model\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n * @param {Object} order - the order model\r\n */\r\nfunction updateShippingSummaryInformation(shipping, order) {\r\n    $('[data-shipment-summary=' + shipping.UUID + ']').each(function (i, el) {\r\n        var $container = $(el);\r\n        var $shippingAddressLabel = $container.find('.shipping-addr-label');\r\n        var $addressContainer = $container.find('.address-summary');\r\n        var $shippingPhone = $container.find('.shipping-phone');\r\n        var $methodTitle = $container.find('.shipping-method-title');\r\n        var $methodArrivalTime = $container.find('.shipping-method-arrival-time');\r\n        var $methodPrice = $container.find('.shipping-method-price');\r\n        var $shippingSummaryLabel = $container.find('.shipping-method-label');\r\n        var $summaryDetails = $container.find('.row.summary-details');\r\n        var giftMessageSummary = $container.find('.gift-summary');\r\n\r\n        var address = shipping.shippingAddress;\r\n        var selectedShippingMethod = shipping.selectedShippingMethod;\r\n        var isGift = shipping.isGift;\r\n\r\n        addressHelpers.methods.populateAddressSummary($addressContainer, address);\r\n\r\n        if (address && address.phone) {\r\n            $shippingPhone.text(address.phone);\r\n        } else {\r\n            $shippingPhone.empty();\r\n        }\r\n\r\n        if (selectedShippingMethod) {\r\n            $('body').trigger('shipping:updateAddressLabelText',\r\n                { selectedShippingMethod: selectedShippingMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\r\n            $shippingSummaryLabel.show();\r\n            $summaryDetails.show();\r\n            $methodTitle.text(selectedShippingMethod.displayName);\r\n            if (selectedShippingMethod.estimatedArrivalTime) {\r\n                $methodArrivalTime.text(\r\n                    '( ' + selectedShippingMethod.estimatedArrivalTime + ' )'\r\n                );\r\n            } else {\r\n                $methodArrivalTime.empty();\r\n            }\r\n            $methodPrice.text(selectedShippingMethod.shippingCost);\r\n        }\r\n\r\n        if (isGift) {\r\n            giftMessageSummary.find('.gift-message-summary').text(shipping.giftMessage);\r\n            giftMessageSummary.removeClass('d-none');\r\n        } else {\r\n            giftMessageSummary.addClass('d-none');\r\n        }\r\n    });\r\n\r\n    $('body').trigger('shipping:updateShippingSummaryInformation', { shipping: shipping, order: order });\r\n}\r\n\r\n/**\r\n * Update the read-only portion of the shipment display (per PLI)\r\n * @param {Object} productLineItem - the productLineItem model\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n * @param {Object} order - the order model\r\n * @param {Object} [options] - options for updating PLI summary info\r\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\r\n */\r\nfunction updatePLIShippingSummaryInformation(productLineItem, shipping, order, options) {\r\n    var $pli = $('input[value=' + productLineItem.UUID + ']');\r\n    var form = $pli && $pli.length > 0 ? $pli[0].form : null;\r\n\r\n    if (!form) return;\r\n\r\n    var $viewBlock = $('.view-address-block', form);\r\n\r\n    var address = shipping.shippingAddress || {};\r\n    var selectedMethod = shipping.selectedShippingMethod;\r\n\r\n    var nameLine = address.firstName ? address.firstName + ' ' : '';\r\n    if (address.lastName) nameLine += address.lastName;\r\n\r\n    var address1Line = address.address1;\r\n    var address2Line = address.address2;\r\n\r\n    var phoneLine = address.phone;\r\n\r\n    var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\r\n    var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\r\n    var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\r\n        ? '(' + selectedMethod.estimatedArrivalTime + ')'\r\n        : '';\r\n\r\n    var tmpl = $('#pli-shipping-summary-template').clone();\r\n\r\n    $('.ship-to-name', tmpl).text(nameLine);\r\n    $('.ship-to-address1', tmpl).text(address1Line);\r\n    $('.ship-to-address2', tmpl).text(address2Line);\r\n    $('.ship-to-city', tmpl).text(address.city);\r\n    if (address.stateCode) {\r\n        $('.ship-to-st', tmpl).text(address.stateCode);\r\n    }\r\n    $('.ship-to-zip', tmpl).text(address.postalCode);\r\n    $('.ship-to-phone', tmpl).text(phoneLine);\r\n\r\n    if (!address2Line) {\r\n        $('.ship-to-address2', tmpl).hide();\r\n    }\r\n\r\n    if (!phoneLine) {\r\n        $('.ship-to-phone', tmpl).hide();\r\n    }\r\n\r\n    if (shipping.selectedShippingMethod) {\r\n        $('.display-name', tmpl).text(methodNameLine);\r\n        $('.arrival-time', tmpl).text(methodArrivalTime);\r\n        $('.price', tmpl).text(shippingCost);\r\n    }\r\n\r\n    if (shipping.isGift) {\r\n        $('.gift-message-summary', tmpl).text(shipping.giftMessage);\r\n        var shipment = $('.gift-message-' + shipping.UUID);\r\n        $(shipment).val(shipping.giftMessage);\r\n    } else {\r\n        $('.gift-summary', tmpl).addClass('d-none');\r\n    }\r\n    // checking h5 title shipping to or pickup\r\n    var $shippingAddressLabel = $('.shipping-header-text', tmpl);\r\n    $('body').trigger('shipping:updateAddressLabelText',\r\n        { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\r\n\r\n    $viewBlock.html(tmpl.html());\r\n\r\n    $('body').trigger('shipping:updatePLIShippingSummaryInformation', {\r\n        productLineItem: productLineItem,\r\n        shipping: shipping,\r\n        order: order,\r\n        options: options\r\n    });\r\n}\r\n\r\n/**\r\n * Update the hidden form values that associate shipping info with product line items\r\n * @param {Object} productLineItem - the productLineItem model\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n */\r\nfunction updateProductLineItemShipmentUUIDs(productLineItem, shipping) {\r\n    $('input[value=' + productLineItem.UUID + ']').each(function (key, pli) {\r\n        var form = pli.form;\r\n        $('[name=shipmentUUID]', form).val(shipping.UUID);\r\n        $('[name=originalShipmentUUID]', form).val(shipping.UUID);\r\n\r\n        $(form).closest('.card').attr('data-shipment-uuid', shipping.UUID);\r\n    });\r\n\r\n    $('body').trigger('shipping:updateProductLineItemShipmentUUIDs', {\r\n        productLineItem: productLineItem,\r\n        shipping: shipping\r\n    });\r\n}\r\n\r\n/**\r\n * Update the shipping UI for a single shipping info (shipment model)\r\n * @param {Object} shipping - the shipping (shipment model) model\r\n * @param {Object} order - the order/basket model\r\n * @param {Object} customer - the customer model\r\n * @param {Object} [options] - options for updating PLI summary info\r\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\r\n */\r\nfunction updateShippingInformation(shipping, order, customer, options) {\r\n    // First copy over shipmentUUIDs from response, to each PLI form\r\n    order.shipping.forEach(function (aShipping) {\r\n        aShipping.productLineItems.items.forEach(function (productLineItem) {\r\n            updateProductLineItemShipmentUUIDs(productLineItem, aShipping);\r\n        });\r\n    });\r\n\r\n    // Now update shipping information, based on those associations\r\n    updateShippingMethods(shipping);\r\n    updateShippingAddressFormValues(shipping);\r\n    updateShippingSummaryInformation(shipping, order);\r\n\r\n    // And update the PLI-based summary information as well\r\n    shipping.productLineItems.items.forEach(function (productLineItem) {\r\n        updateShippingAddressSelector(productLineItem, shipping, order, customer);\r\n        updatePLIShippingSummaryInformation(productLineItem, shipping, order, options);\r\n    });\r\n\r\n    $('body').trigger('shipping:updateShippingInformation', {\r\n        order: order,\r\n        shipping: shipping,\r\n        customer: customer,\r\n        options: options\r\n    });\r\n}\r\n\r\n/**\r\n * Update the checkout state (single vs. multi-ship)\r\n * @param {Object} order - checkout model to use as basis of new truth\r\n */\r\nfunction updateMultiShipInformation(order) {\r\n    var $checkoutMain = $('#checkout-main');\r\n    var $checkbox = $('[name=usingMultiShipping]');\r\n    var $submitShippingBtn = $('button.submit-shipping');\r\n    $('.shipping-error .alert-danger').remove();\r\n\r\n    if (order.usingMultiShipping) {\r\n        $checkoutMain.addClass('multi-ship');\r\n        $checkbox.prop('checked', true);\r\n    } else {\r\n        $checkoutMain.removeClass('multi-ship');\r\n        $checkbox.prop('checked', null);\r\n        $submitShippingBtn.prop('disabled', null);\r\n    }\r\n\r\n    $('body').trigger('shipping:updateMultiShipInformation', { order: order });\r\n}\r\n\r\n/**\r\n  * Create an alert to display the error message\r\n  * @param {Object} message - Error message to display\r\n  */\r\nfunction createErrorNotification(message) {\r\n    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\r\n    'fade show\" role=\"alert\">' +\r\n    '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\r\n    '<span aria-hidden=\"true\">&times;</span>' +\r\n    '</button>' + message + '</div>';\r\n\r\n    $('.shipping-error').append(errorHtml);\r\n    scrollAnimate($('.shipping-error'));\r\n}\r\n\r\n/**\r\n * Handle response from the server for valid or invalid form fields.\r\n * @param {Object} defer - the deferred object which will resolve on success or reject.\r\n * @param {Object} data - the response data with the invalid form fields or\r\n *  valid model data.\r\n */\r\nfunction shippingFormResponse(defer, data) {\r\n    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\r\n    var formSelector = isMultiShip\r\n        ? '.multi-shipping .active form'\r\n        : '.single-shipping form';\r\n\r\n    // highlight fields with errors\r\n    if (data.error) {\r\n        if (data.fieldErrors.length) {\r\n            data.fieldErrors.forEach(function (error) {\r\n                if (Object.keys(error).length) {\r\n                    formHelpers.loadFormErrors(formSelector, error);\r\n                }\r\n            });\r\n            defer.reject(data);\r\n        }\r\n\r\n        if (data.serverErrors && data.serverErrors.length) {\r\n            $.each(data.serverErrors, function (index, element) {\r\n                createErrorNotification(element);\r\n            });\r\n\r\n            defer.reject(data);\r\n        }\r\n\r\n        if (data.cartError) {\r\n            window.location.href = data.redirectUrl;\r\n            defer.reject();\r\n        }\r\n    } else {\r\n        // Populate the Address Summary\r\n\r\n        $('body').trigger('checkout:updateCheckoutView', {\r\n            order: data.order,\r\n            customer: data.customer\r\n        });\r\n        scrollAnimate($('.payment-form'));\r\n        defer.resolve(data);\r\n    }\r\n}\r\n/**\r\n * Clear out all the shipping form values and select the new address in the drop down\r\n * @param {Object} order - the order object\r\n */\r\nfunction clearShippingForms(order) {\r\n    order.shipping.forEach(function (shipping) {\r\n        $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\r\n            var form = el.form;\r\n            if (!form) return;\r\n\r\n            $('input[name$=_firstName]', form).val('');\r\n            $('input[name$=_lastName]', form).val('');\r\n            $('input[name$=_address1]', form).val('');\r\n            $('input[name$=_address2]', form).val('');\r\n            $('input[name$=_city]', form).val('');\r\n            $('input[name$=_postalCode]', form).val('');\r\n            $('select[name$=_stateCode],input[name$=_stateCode]', form).val('');\r\n            $('select[name$=_country]', form).val('');\r\n\r\n            $('input[name$=_phone]', form).val('');\r\n\r\n            $('input[name$=_isGift]', form).prop('checked', false);\r\n            $('textarea[name$=_giftMessage]', form).val('');\r\n            $(form).find('.gift-message').addClass('d-none');\r\n\r\n            $(form).attr('data-address-mode', 'new');\r\n            var addressSelectorDropDown = $('.addressSelector option[value=new]', form);\r\n            $(addressSelectorDropDown).prop('selected', true);\r\n        });\r\n    });\r\n\r\n    $('body').trigger('shipping:clearShippingForms', { order: order });\r\n}\r\n\r\n/**\r\n * Does Ajax call to create a server-side shipment w/ pliUUID & URL\r\n * @param {string} url - string representation of endpoint URL\r\n * @param {Object} shipmentData - product line item UUID\r\n * @returns {Object} - promise value for async call\r\n */\r\nfunction createNewShipment(url, shipmentData) {\r\n    $.spinner().start();\r\n    return $.ajax({\r\n        url: url,\r\n        type: 'post',\r\n        dataType: 'json',\r\n        data: shipmentData\r\n    });\r\n}\r\n\r\n/**\r\n * Does Ajax call to select shipping method\r\n * @param {string} url - string representation of endpoint URL\r\n * @param {Object} urlParams - url params\r\n * @param {Object} el - element that triggered this call\r\n */\r\nfunction selectShippingMethodAjax(url, urlParams, el) {\r\n    $.spinner().start();\r\n    $('body').trigger('checkout:beforeShippingMethodSelected');\r\n    $.ajax({\r\n        url: url,\r\n        type: 'post',\r\n        dataType: 'json',\r\n        data: urlParams\r\n    })\r\n        .done(function (data) {\r\n            if (data.error) {\r\n                window.location.href = data.redirectUrl;\r\n            } else {\r\n                $('body').trigger('checkout:updateCheckoutView',\r\n                    {\r\n                        order: data.order,\r\n                        customer: data.customer,\r\n                        options: { keepOpen: true },\r\n                        urlParams: urlParams\r\n                    }\r\n                );\r\n                $('body').trigger('checkout:postUpdateCheckoutView',\r\n                    {\r\n                        el: el\r\n                    }\r\n                );\r\n            }\r\n            $('body').trigger('checkout:shippingMethodSelected', data);\r\n            $.spinner().stop();\r\n        })\r\n        .fail(function () {\r\n            $.spinner().stop();\r\n        });\r\n}\r\n\r\n/**\r\n * Hide and show to appropriate elements to show the multi ship shipment cards in the enter view\r\n * @param {jQuery} element - The shipping content\r\n */\r\nfunction enterMultishipView(element) {\r\n    element.find('.btn-enter-multi-ship').removeClass('d-none');\r\n\r\n    element.find('.view-address-block').addClass('d-none');\r\n    element.find('.shipping-address').addClass('d-none');\r\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\r\n    element.find('.btn-edit-multi-ship').addClass('d-none');\r\n    element.find('.multi-ship-address-actions').addClass('d-none');\r\n}\r\n\r\n/**\r\n * Hide and show to appropriate elements to show the multi ship shipment cards in the view mode\r\n * @param {jQuery} element - The shipping content\r\n */\r\nfunction viewMultishipAddress(element) {\r\n    element.find('.view-address-block').removeClass('d-none');\r\n    element.find('.btn-edit-multi-ship').removeClass('d-none');\r\n\r\n    element.find('.shipping-address').addClass('d-none');\r\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\r\n    element.find('.btn-enter-multi-ship').addClass('d-none');\r\n    element.find('.multi-ship-address-actions').addClass('d-none');\r\n}\r\n\r\n/**\r\n * Hide and show to appropriate elements that allows the user to edit multi ship address information\r\n * @param {jQuery} element - The shipping content\r\n */\r\nfunction editMultiShipAddress(element) {\r\n    // Show\r\n    element.find('.shipping-address').removeClass('d-none');\r\n    element.find('.btn-save-multi-ship.save-shipment').removeClass('d-none');\r\n\r\n    // Hide\r\n    element.find('.view-address-block').addClass('d-none');\r\n    element.find('.btn-enter-multi-ship').addClass('d-none');\r\n    element.find('.btn-edit-multi-ship').addClass('d-none');\r\n    element.find('.multi-ship-address-actions').addClass('d-none');\r\n\r\n    $('body').trigger('shipping:editMultiShipAddress', { element: element, form: element.find('.shipping-form') });\r\n}\r\n\r\n/**\r\n * perform the proper actions once a user has clicked enter address or edit address for a shipment\r\n * @param {jQuery} element - The shipping content\r\n * @param {string} mode - the address mode\r\n */\r\nfunction editOrEnterMultiShipInfo(element, mode) {\r\n    var form = $(element).closest('form');\r\n    var root = $(element).closest('.shipping-content');\r\n\r\n    $('body').trigger('shipping:updateDataAddressMode', { form: form, mode: mode });\r\n\r\n    editMultiShipAddress(root);\r\n\r\n    var addressInfo = addressHelpers.methods.getAddressFieldsFromUI(form);\r\n\r\n    var savedState = {\r\n        UUID: $('input[name=shipmentUUID]', form).val(),\r\n        shippingAddress: addressInfo\r\n    };\r\n\r\n    root.data('saved-state', JSON.stringify(savedState));\r\n}\r\n\r\nmodule.exports = {\r\n    methods: {\r\n        updateShippingAddressSelector: updateShippingAddressSelector,\r\n        updateShippingAddressFormValues: updateShippingAddressFormValues,\r\n        updateShippingMethods: updateShippingMethods,\r\n        updateShippingSummaryInformation: updateShippingSummaryInformation,\r\n        updatePLIShippingSummaryInformation: updatePLIShippingSummaryInformation,\r\n        updateProductLineItemShipmentUUIDs: updateProductLineItemShipmentUUIDs,\r\n        updateShippingInformation: updateShippingInformation,\r\n        updateMultiShipInformation: updateMultiShipInformation,\r\n        shippingFormResponse: shippingFormResponse,\r\n        createNewShipment: createNewShipment,\r\n        selectShippingMethodAjax: selectShippingMethodAjax,\r\n        updateShippingMethodList: updateShippingMethodList,\r\n        clearShippingForms: clearShippingForms,\r\n        editMultiShipAddress: editMultiShipAddress,\r\n        editOrEnterMultiShipInfo: editOrEnterMultiShipInfo,\r\n        createErrorNotification: createErrorNotification,\r\n        viewMultishipAddress: viewMultishipAddress\r\n    },\r\n\r\n    selectShippingMethod: function () {\r\n        var baseObj = this;\r\n\r\n        $('.shipping-method-list').change(function () {\r\n            var $shippingForm = $(this).parents('form');\r\n            var methodID = $(':checked', this).val();\r\n            var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\r\n            var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\r\n            urlParams.shipmentUUID = shipmentUUID;\r\n            urlParams.methodID = methodID;\r\n            urlParams.isGift = $shippingForm.find('.gift').prop('checked');\r\n            urlParams.giftMessage = $shippingForm.find('textarea[name$=_giftMessage]').val();\r\n\r\n            var url = $(this).data('select-shipping-method-url');\r\n\r\n            if (baseObj.methods && baseObj.methods.selectShippingMethodAjax) {\r\n                baseObj.methods.selectShippingMethodAjax(url, urlParams, $(this));\r\n            } else {\r\n                selectShippingMethodAjax(url, urlParams, $(this));\r\n            }\r\n        });\r\n    },\r\n\r\n    toggleMultiship: function () {\r\n        var baseObj = this;\r\n\r\n        $('input[name=\"usingMultiShipping\"]').on('change', function () {\r\n            var url = $('.multi-shipping-checkbox-block form').attr('action');\r\n            var usingMultiShip = this.checked;\r\n\r\n            $.ajax({\r\n                url: url,\r\n                type: 'post',\r\n                dataType: 'json',\r\n                data: { usingMultiShip: usingMultiShip },\r\n                success: function (response) {\r\n                    if (response.error) {\r\n                        window.location.href = response.redirectUrl;\r\n                    } else {\r\n                        $('body').trigger('checkout:updateCheckoutView', {\r\n                            order: response.order,\r\n                            customer: response.customer\r\n                        });\r\n\r\n                        if ($('#checkout-main').data('customer-type') === 'guest') {\r\n                            if (baseObj.methods && baseObj.methods.clearShippingForms) {\r\n                                baseObj.methods.clearShippingForms(response.order);\r\n                            } else {\r\n                                clearShippingForms(response.order);\r\n                            }\r\n                        } else {\r\n                            response.order.shipping.forEach(function (shipping) {\r\n                                $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\r\n                                    var form = el.form;\r\n                                    if (!form) return;\r\n\r\n                                    $(form).attr('data-address-mode', 'edit');\r\n                                    var addressSelectorDropDown = $(form).find('.addressSelector option[value=\"ab_' + shipping.matchingAddressId + '\"]');\r\n                                    $(addressSelectorDropDown).prop('selected', true);\r\n                                    $('input[name$=_isGift]', form).prop('checked', false);\r\n                                    $('textarea[name$=_giftMessage]', form).val('');\r\n                                    $(form).find('.gift-message').addClass('d-none');\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        if (usingMultiShip) {\r\n                            $('body').trigger('shipping:selectMultiShipping', { data: response });\r\n                        } else {\r\n                            $('body').trigger('shipping:selectSingleShipping', { data: response });\r\n                        }\r\n                    }\r\n\r\n                    $.spinner().stop();\r\n                },\r\n                error: function () {\r\n                    $.spinner().stop();\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    selectSingleShipping: function () {\r\n        $('body').on('shipping:selectSingleShipping', function () {\r\n            $('.single-shipping .shipping-address').removeClass('d-none');\r\n        });\r\n    },\r\n\r\n    selectMultiShipping: function () {\r\n        var baseObj = this;\r\n\r\n        $('body').on('shipping:selectMultiShipping', function (e, data) {\r\n            $('.multi-shipping .shipping-address').addClass('d-none');\r\n\r\n            data.data.order.shipping.forEach(function (shipping) {\r\n                var element = $('.multi-shipping .card[data-shipment-uuid=\"' + shipping.UUID + '\"]');\r\n\r\n                if (shipping.shippingAddress) {\r\n                    if (baseObj.methods && baseObj.methods.viewMultishipAddress) {\r\n                        baseObj.methods.viewMultishipAddress($(element));\r\n                    } else {\r\n                        viewMultishipAddress($(element));\r\n                    }\r\n                } else {\r\n                    /* eslint-disable no-lonely-if */\r\n                    if (baseObj.methods && baseObj.methods.enterMultishipView) {\r\n                        baseObj.methods.enterMultishipView($(element));\r\n                    } else {\r\n                        enterMultishipView($(element));\r\n                    }\r\n                    /* eslint-enable no-lonely-if */\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    selectSingleShipAddress: function () {\r\n        $('.single-shipping .addressSelector').on('change', function () {\r\n            var form = $(this).parents('form')[0];\r\n            var selectedOption = $('option:selected', this);\r\n            var attrs = selectedOption.data();\r\n            var shipmentUUID = selectedOption[0].value;\r\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\r\n            var element;\r\n            Object.keys(attrs).forEach(function (attr) {\r\n                element = attr === 'countryCode' ? 'country' : attr;\r\n                $('[name$=' + element + ']', form).val(attrs[attr]);\r\n            });\r\n            $('[name$=stateCode]', form).trigger('change');\r\n            if (shipmentUUID === 'new') {\r\n                $(form).attr('data-address-mode', 'new');\r\n                $(form).find('.shipping-address-block').removeClass('d-none');\r\n            } else if (shipmentUUID === originalUUID) {\r\n                $(form).attr('data-address-mode', 'shipment');\r\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\r\n                $(form).attr('data-address-mode', 'customer');\r\n            } else {\r\n                $(form).attr('data-address-mode', 'edit');\r\n            }\r\n        });\r\n    },\r\n\r\n    selectMultiShipAddress: function () {\r\n        var baseObj = this;\r\n\r\n        $('.multi-shipping .addressSelector').on('change', function () {\r\n            var form = $(this).closest('form');\r\n            var selectedOption = $('option:selected', this);\r\n            var attrs = selectedOption.data();\r\n            var shipmentUUID = selectedOption[0].value;\r\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\r\n            var pliUUID = $('input[name=productLineItemUUID]', form).val();\r\n            var createNewShipmentScoped = baseObj.methods && baseObj.methods.createNewShipment ? baseObj.methods.createNewShipment : createNewShipment;\r\n\r\n            var element;\r\n            Object.keys(attrs).forEach(function (attr) {\r\n                if (attr === 'isGift') {\r\n                    $('[name$=' + attr + ']', form).prop('checked', attrs[attr]);\r\n                    $('[name$=' + attr + ']', form).trigger('change');\r\n                } else {\r\n                    element = attr === 'countryCode' ? 'country' : attr;\r\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\r\n                }\r\n            });\r\n\r\n            if (shipmentUUID === 'new' && pliUUID) {\r\n                var createShipmentUrl = $(this).attr('data-create-shipment-url');\r\n                createNewShipmentScoped(createShipmentUrl, { productLineItemUUID: pliUUID })\r\n                    .done(function (response) {\r\n                        $.spinner().stop();\r\n                        if (response.error) {\r\n                            if (response.redirectUrl) {\r\n                                window.location.href = response.redirectUrl;\r\n                            }\r\n                            return;\r\n                        }\r\n\r\n                        $('body').trigger('checkout:updateCheckoutView',\r\n                            {\r\n                                order: response.order,\r\n                                customer: response.customer,\r\n                                options: { keepOpen: true }\r\n                            }\r\n                        );\r\n\r\n                        $(form).attr('data-address-mode', 'new');\r\n                    })\r\n                    .fail(function () {\r\n                        $.spinner().stop();\r\n                    });\r\n            } else if (shipmentUUID === originalUUID) {\r\n                $('select[name$=stateCode]', form).trigger('change');\r\n                $(form).attr('data-address-mode', 'shipment');\r\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\r\n                var url = $(form).attr('action');\r\n                var serializedData = $(form).serialize();\r\n                createNewShipmentScoped(url, serializedData)\r\n                    .done(function (response) {\r\n                        $.spinner().stop();\r\n                        if (response.error) {\r\n                            if (response.redirectUrl) {\r\n                                window.location.href = response.redirectUrl;\r\n                            }\r\n                            return;\r\n                        }\r\n\r\n                        $('body').trigger('checkout:updateCheckoutView',\r\n                            {\r\n                                order: response.order,\r\n                                customer: response.customer,\r\n                                options: { keepOpen: true }\r\n                            }\r\n                        );\r\n\r\n                        $(form).attr('data-address-mode', 'customer');\r\n                        var $rootEl = $(form).closest('.shipping-content');\r\n                        editMultiShipAddress($rootEl);\r\n                    })\r\n                    .fail(function () {\r\n                        $.spinner().stop();\r\n                    });\r\n            } else {\r\n                var updatePLIShipmentUrl = $(form).attr('action');\r\n                var serializedAddress = $(form).serialize();\r\n                createNewShipmentScoped(updatePLIShipmentUrl, serializedAddress)\r\n                    .done(function (response) {\r\n                        $.spinner().stop();\r\n                        if (response.error) {\r\n                            if (response.redirectUrl) {\r\n                                window.location.href = response.redirectUrl;\r\n                            }\r\n                            return;\r\n                        }\r\n\r\n                        $('body').trigger('checkout:updateCheckoutView',\r\n                            {\r\n                                order: response.order,\r\n                                customer: response.customer,\r\n                                options: { keepOpen: true }\r\n                            }\r\n                        );\r\n\r\n                        $(form).attr('data-address-mode', 'edit');\r\n                    })\r\n                    .fail(function () {\r\n                        $.spinner().stop();\r\n                    });\r\n            }\r\n        });\r\n    },\r\n\r\n    updateShippingList: function () {\r\n        var baseObj = this;\r\n\r\n        $('select[name$=\"shippingAddress_addressFields_states_stateCode\"]')\r\n            .on('change', function (e) {\r\n                if (baseObj.methods && baseObj.methods.updateShippingMethodList) {\r\n                    baseObj.methods.updateShippingMethodList($(e.currentTarget.form));\r\n                } else {\r\n                    updateShippingMethodList($(e.currentTarget.form));\r\n                }\r\n            });\r\n    },\r\n\r\n    updateDataAddressMode: function () {\r\n        $('body').on('shipping:updateDataAddressMode', function (e, data) {\r\n            $(data.form).attr('data-address-mode', data.mode);\r\n        });\r\n    },\r\n\r\n    enterMultiShipInfo: function () {\r\n        var baseObj = this;\r\n\r\n        $('.btn-enter-multi-ship').on('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {\r\n                baseObj.methods.editOrEnterMultiShipInfo($(this), 'new');\r\n            } else {\r\n                editOrEnterMultiShipInfo($(this), 'new');\r\n            }\r\n        });\r\n    },\r\n\r\n    editMultiShipInfo: function () {\r\n        var baseObj = this;\r\n\r\n        $('.btn-edit-multi-ship').on('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {\r\n                baseObj.methods.editOrEnterMultiShipInfo($(this), 'edit');\r\n            } else {\r\n                editOrEnterMultiShipInfo($(this), 'edit');\r\n            }\r\n        });\r\n    },\r\n\r\n    saveMultiShipInfo: function () {\r\n        var baseObj = this;\r\n\r\n        $('.btn-save-multi-ship').on('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            // Save address to checkoutAddressBook\r\n            var form = $(this).closest('form');\r\n            var $rootEl = $(this).closest('.shipping-content');\r\n            var data = $(form).serialize();\r\n            var url = $(form).attr('action');\r\n\r\n            $rootEl.spinner().start();\r\n            $.ajax({\r\n                url: url,\r\n                type: 'post',\r\n                dataType: 'json',\r\n                data: data\r\n            })\r\n                .done(function (response) {\r\n                    formHelpers.clearPreviousErrors(form);\r\n                    if (response.error) {\r\n                        if (response.fieldErrors && response.fieldErrors.length) {\r\n                            response.fieldErrors.forEach(function (error) {\r\n                                if (Object.keys(error).length) {\r\n                                    formHelpers.loadFormErrors(form, error);\r\n                                }\r\n                            });\r\n                        } else if (response.serverErrors && response.serverErrors.length) {\r\n                            $.each(response.serverErrors, function (index, element) {\r\n                                createErrorNotification(element);\r\n                            });\r\n                        } else if (response.redirectUrl) {\r\n                            window.location.href = response.redirectUrl;\r\n                        }\r\n                    } else {\r\n                        // Update UI from response\r\n                        $('body').trigger('checkout:updateCheckoutView',\r\n                            {\r\n                                order: response.order,\r\n                                customer: response.customer\r\n                            }\r\n                        );\r\n\r\n                        if (baseObj.methods && baseObj.methods.viewMultishipAddress) {\r\n                            baseObj.methods.viewMultishipAddress($rootEl);\r\n                        } else {\r\n                            viewMultishipAddress($rootEl);\r\n                        }\r\n                    }\r\n\r\n                    if (response.order && response.order.shippable) {\r\n                        $('button.submit-shipping').attr('disabled', null);\r\n                    }\r\n\r\n                    $rootEl.spinner().stop();\r\n                })\r\n                .fail(function (err) {\r\n                    if (err.responseJSON.redirectUrl) {\r\n                        window.location.href = err.responseJSON.redirectUrl;\r\n                    }\r\n\r\n                    $rootEl.spinner().stop();\r\n                });\r\n\r\n            return false;\r\n        });\r\n    },\r\n\r\n    cancelMultiShipAddress: function () {\r\n        var baseObj = this;\r\n\r\n        $('.btn-cancel-multi-ship-address').on('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            var form = $(this).closest('form');\r\n            var $rootEl = $(this).closest('.shipping-content');\r\n            var restoreState = $rootEl.data('saved-state');\r\n\r\n            // Should clear out changes / restore previous state\r\n            if (restoreState) {\r\n                var restoreStateObj = JSON.parse(restoreState);\r\n                var originalStateCode = restoreStateObj.shippingAddress.stateCode;\r\n                var stateCode = $('[name$=_stateCode]', form).val();\r\n\r\n                if (baseObj.methods && baseObj.methods.updateShippingAddressFormValues) {\r\n                    baseObj.methods.updateShippingAddressFormValues(restoreStateObj);\r\n                } else {\r\n                    updateShippingAddressFormValues(restoreStateObj);\r\n                }\r\n\r\n                if (stateCode !== originalStateCode) {\r\n                    $('[data-action=save]', form).trigger('click');\r\n                } else {\r\n                    $(form).attr('data-address-mode', 'edit');\r\n                    if (baseObj.methods && baseObj.methods.editMultiShipAddress) {\r\n                        baseObj.methods.editMultiShipAddress($rootEl);\r\n                    } else {\r\n                        editMultiShipAddress($rootEl);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        });\r\n    },\r\n\r\n    isGift: function () {\r\n        $('.gift').on('change', function (e) {\r\n            e.preventDefault();\r\n            var form = $(this).closest('form');\r\n\r\n            if (this.checked) {\r\n                $(form).find('.gift-message').removeClass('d-none');\r\n            } else {\r\n                $(form).find('.gift-message').addClass('d-none');\r\n                $(form).find('.gift-message').val('');\r\n            }\r\n        });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/shipping.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/summary.js":
/*!***************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/summary.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\n/**\r\n * updates the totals summary\r\n * @param {Array} totals - the totals data\r\n */\r\nfunction updateTotals(totals) {\r\n    $('.shipping-total-cost').text(totals.totalShippingCost);\r\n    $('.tax-total').text(totals.totalTax);\r\n    $('.sub-total').text(totals.subTotal);\r\n    $('.grand-total-sum').text(totals.grandTotal);\r\n\r\n    if (totals.orderLevelDiscountTotal.value > 0) {\r\n        $('.order-discount').removeClass('hide-order-discount');\r\n        $('.order-discount-total').text('- ' + totals.orderLevelDiscountTotal.formatted);\r\n    } else {\r\n        $('.order-discount').addClass('hide-order-discount');\r\n    }\r\n\r\n    if (totals.shippingLevelDiscountTotal.value > 0) {\r\n        $('.shipping-discount').removeClass('hide-shipping-discount');\r\n        $('.shipping-discount-total').text('- ' +\r\n            totals.shippingLevelDiscountTotal.formatted);\r\n    } else {\r\n        $('.shipping-discount').addClass('hide-shipping-discount');\r\n    }\r\n}\r\n\r\n/**\r\n * updates the order product shipping summary for an order model\r\n * @param {Object} order - the order model\r\n */\r\nfunction updateOrderProductSummaryInformation(order) {\r\n    var $productSummary = $('<div />');\r\n    order.shipping.forEach(function (shipping) {\r\n        shipping.productLineItems.items.forEach(function (lineItem) {\r\n            var pli = $('[data-product-line-item=' + lineItem.UUID + ']');\r\n            $productSummary.append(pli);\r\n        });\r\n\r\n        var address = shipping.shippingAddress || {};\r\n        var selectedMethod = shipping.selectedShippingMethod;\r\n\r\n        var nameLine = address.firstName ? address.firstName + ' ' : '';\r\n        if (address.lastName) nameLine += address.lastName;\r\n\r\n        var address1Line = address.address1;\r\n        var address2Line = address.address2;\r\n\r\n        var phoneLine = address.phone;\r\n\r\n        var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\r\n        var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\r\n        var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\r\n            ? '( ' + selectedMethod.estimatedArrivalTime + ' )'\r\n            : '';\r\n\r\n        var tmpl = $('#pli-shipping-summary-template').clone();\r\n\r\n        if (shipping.productLineItems.items && shipping.productLineItems.items.length > 1) {\r\n            $('h5 > span').text(' - ' + shipping.productLineItems.items.length + ' '\r\n                + order.resources.items);\r\n        } else {\r\n            $('h5 > span').text('');\r\n        }\r\n\r\n        var stateRequiredAttr = $('#shippingState').attr('required');\r\n        var isRequired = stateRequiredAttr !== undefined && stateRequiredAttr !== false;\r\n        var stateExists = (shipping.shippingAddress && shipping.shippingAddress.stateCode)\r\n            ? shipping.shippingAddress.stateCode\r\n            : false;\r\n        var stateBoolean = false;\r\n        if ((isRequired && stateExists) || (!isRequired)) {\r\n            stateBoolean = true;\r\n        }\r\n\r\n        var shippingForm = $('.multi-shipping input[name=\"shipmentUUID\"][value=\"' + shipping.UUID + '\"]').parent();\r\n\r\n        if (shipping.shippingAddress\r\n            && shipping.shippingAddress.firstName\r\n            && shipping.shippingAddress.address1\r\n            && shipping.shippingAddress.city\r\n            && stateBoolean\r\n            && shipping.shippingAddress.countryCode\r\n            && (shipping.shippingAddress.phone || shipping.productLineItems.items[0].fromStoreId)) {\r\n            $('.ship-to-name', tmpl).text(nameLine);\r\n            $('.ship-to-address1', tmpl).text(address1Line);\r\n            $('.ship-to-address2', tmpl).text(address2Line);\r\n            $('.ship-to-city', tmpl).text(address.city);\r\n            if (address.stateCode) {\r\n                $('.ship-to-st', tmpl).text(address.stateCode);\r\n            }\r\n            $('.ship-to-zip', tmpl).text(address.postalCode);\r\n            $('.ship-to-phone', tmpl).text(phoneLine);\r\n\r\n            if (!address2Line) {\r\n                $('.ship-to-address2', tmpl).hide();\r\n            }\r\n\r\n            if (!phoneLine) {\r\n                $('.ship-to-phone', tmpl).hide();\r\n            }\r\n\r\n            shippingForm.find('.ship-to-message').text('');\r\n        } else {\r\n            shippingForm.find('.ship-to-message').text(order.resources.addressIncomplete);\r\n        }\r\n\r\n        if (shipping.isGift) {\r\n            $('.gift-message-summary', tmpl).text(shipping.giftMessage);\r\n        } else {\r\n            $('.gift-summary', tmpl).addClass('d-none');\r\n        }\r\n\r\n        // checking h5 title shipping to or pickup\r\n        var $shippingAddressLabel = $('.shipping-header-text', tmpl);\r\n        $('body').trigger('shipping:updateAddressLabelText',\r\n            { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel });\r\n\r\n        if (shipping.selectedShippingMethod) {\r\n            $('.display-name', tmpl).text(methodNameLine);\r\n            $('.arrival-time', tmpl).text(methodArrivalTime);\r\n            $('.price', tmpl).text(shippingCost);\r\n        }\r\n\r\n        var $shippingSummary = $('<div class=\"multi-shipping\" data-shipment-summary=\"'\r\n            + shipping.UUID + '\" />');\r\n        $shippingSummary.html(tmpl.html());\r\n        $productSummary.append($shippingSummary);\r\n    });\r\n\r\n    $('.product-summary-block').html($productSummary.html());\r\n\r\n    // Also update the line item prices, as they might have been altered\r\n    $('.grand-total-price').text(order.totals.subTotal);\r\n    order.items.items.forEach(function (item) {\r\n        if (item.priceTotal && item.priceTotal.renderedPrice) {\r\n            $('.item-total-' + item.UUID).empty().append(item.priceTotal.renderedPrice);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = {\r\n    updateTotals: updateTotals,\r\n    updateOrderProductSummaryInformation: updateOrderProductSummaryInformation\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/checkout/summary.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/components/cleave.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/components/cleave.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar Cleave = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'cleave.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())).default;\r\n\r\nmodule.exports = {\r\n    handleCreditCardNumber: function (cardFieldSelector, cardTypeSelector) {\r\n        var cleave = new Cleave(cardFieldSelector, {\r\n            creditCard: true,\r\n            onCreditCardTypeChanged: function (type) {\r\n                var creditCardTypes = {\r\n                    visa: 'Visa',\r\n                    mastercard: 'Master Card',\r\n                    amex: 'Amex',\r\n                    discover: 'Discover',\r\n                    unknown: 'Unknown'\r\n                };\r\n\r\n                var cardType = creditCardTypes[Object.keys(creditCardTypes).indexOf(type) > -1\r\n                    ? type\r\n                    : 'unknown'];\r\n                $(cardTypeSelector).val(cardType);\r\n                $('.card-number-wrapper').attr('data-type', type);\r\n                if (type === 'visa' || type === 'mastercard' || type === 'discover') {\r\n                    $('#securityCode').attr('maxlength', 3);\r\n                } else {\r\n                    $('#securityCode').attr('maxlength', 4);\r\n                }\r\n            }\r\n        });\r\n\r\n        $(cardFieldSelector).data('cleave', cleave);\r\n    },\r\n\r\n    serializeData: function (form) {\r\n        var serializedArray = form.serializeArray();\r\n\r\n        serializedArray.forEach(function (item) {\r\n            if (item.name.indexOf('cardNumber') > -1) {\r\n                item.value = $('#cardNumber').data('cleave').getRawValue(); // eslint-disable-line\r\n            }\r\n        });\r\n\r\n        return $.param(serializedArray);\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/components/cleave.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/components/errorNotification.js":
/*!***************************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/components/errorNotification.js ***!
  \***************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = function (element, message) {\r\n    var errorHtml = '<div class=\"alert alert-danger alert-dismissible ' +\r\n        'fade show\" role=\"alert\">' +\r\n        '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\r\n        '<span aria-hidden=\"true\">&times;</span>' +\r\n        '</button>' + message + '</div>';\r\n\r\n    $(element).append(errorHtml);\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/components/errorNotification.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/components/scrollAnimate.js":
/*!***********************************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/components/scrollAnimate.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = function (element) {\r\n    var position = element && element.length ? element.offset().top : 0;\r\n    $('html, body').animate({\r\n        scrollTop: position\r\n    }, 500);\r\n    if (!element) {\r\n        $('.logo-home').focus();\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/components/scrollAnimate.js?");

/***/ }),

/***/ "./cartridges/kickstarterpackage/cartridge/client/default/js/util.js":
/*!***************************************************************************!*\
  !*** ./cartridges/kickstarterpackage/cartridge/client/default/js/util.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = function (include) {\r\n    if (typeof include === 'function') {\r\n        include();\r\n    } else if (typeof include === 'object') {\r\n        Object.keys(include).forEach(function (key) {\r\n            if (typeof include[key] === 'function') {\r\n                include[key]();\r\n            }\r\n        });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/kickstarterpackage/cartridge/client/default/js/util.js?");

/***/ })

/******/ });